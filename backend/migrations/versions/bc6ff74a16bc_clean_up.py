"""clean-up

Revision ID: bc6ff74a16bc
Revises: 4392a0c9747f
Create Date: 2022-09-16 10:45:21.612824

"""
from alembic import op
import os
import sqlalchemy as sa
from dataall.db import get_engine, has_table, create_schema_if_not_exists


# revision identifiers, used by Alembic.
revision = 'bc6ff74a16bc'
down_revision = 'b1cdc0dc987a'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    envname = os.getenv('envname', 'local')
    print('ENVNAME', envname)
    print('Clean-up version')
    engine = get_engine(envname=envname).engine
    try:
        # ### These are the tables that should be defined
        """
        if not has_table('activity', engine):
            print('Create table activity')
            op.create_table(
                'activity',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('activityUri', sa.String(), nullable=False),
                sa.Column('targetUri', sa.String(), nullable=False),
                sa.Column('targetType', sa.String(), nullable=False),
                sa.Column('action', sa.String(), nullable=False),
                sa.Column('summary', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('activityUri'),
            )
        if not has_table('dashboard', engine):
            op.create_table(
                'dashboard',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('environmentUri', sa.String(), nullable=False),
                sa.Column('organizationUri', sa.String(), nullable=False),
                sa.Column('dashboardUri', sa.String(), nullable=False),
                sa.Column('region', sa.String(), nullable=True),
                sa.Column('AwsAccountId', sa.String(), nullable=False),
                sa.Column('namespace', sa.String(), nullable=False),
                sa.Column('DashboardId', sa.String(), nullable=False),
                sa.Column('SamlGroupName', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('dashboardUri'),
            )
        if not has_table('dashboardshare', engine):
            op.create_table(
                'dashboardshare',
                sa.Column('shareUri', sa.String(), nullable=False),
                sa.Column('dashboardUri', sa.String(), nullable=False),
                sa.Column('SamlGroupName', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('status', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('shareUri', 'dashboardUri'),
            )
        if not has_table('dataset', engine):
            op.create_table(
                'dataset',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('environmentUri', sa.String(), nullable=False),
                sa.Column('organizationUri', sa.String(), nullable=False),
                sa.Column('datasetUri', sa.String(), nullable=False),
                sa.Column('region', sa.String(), nullable=True),
                sa.Column('AwsAccountId', sa.String(), nullable=False),
                sa.Column('S3BucketName', sa.String(), nullable=False),
                sa.Column('GlueDatabaseName', sa.String(), nullable=False),
                sa.Column('GlueCrawlerName', sa.String(), nullable=True),
                sa.Column('GlueCrawlerSchedule', sa.String(), nullable=True),
                sa.Column('GlueProfilingJobName', sa.String(), nullable=True),
                sa.Column('GlueProfilingTriggerSchedule', sa.String(), nullable=True),
                sa.Column('GlueProfilingTriggerName', sa.String(), nullable=True),
                sa.Column('GlueDataQualityJobName', sa.String(), nullable=True),
                sa.Column('GlueDataQualitySchedule', sa.String(), nullable=True),
                sa.Column('GlueDataQualityTriggerName', sa.String(), nullable=True),
                sa.Column('IAMDatasetAdminRoleArn', sa.String(), nullable=False),
                sa.Column('IAMDatasetAdminUserArn', sa.String(), nullable=False),
                sa.Column('KmsAlias', sa.String(), nullable=False),
                sa.Column('topics', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('confidentiality', sa.String(), nullable=False),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('bucketCreated', sa.Boolean(), nullable=True),
                sa.Column('glueDatabaseCreated', sa.Boolean(), nullable=True),
                sa.Column('iamAdminRoleCreated', sa.Boolean(), nullable=True),
                sa.Column('iamAdminUserCreated', sa.Boolean(), nullable=True),
                sa.Column('kmsAliasCreated', sa.Boolean(), nullable=True),
                sa.Column('lakeformationLocationCreated', sa.Boolean(), nullable=True),
                sa.Column('bucketPolicyCreated', sa.Boolean(), nullable=True),
                sa.Column('businessOwnerEmail', sa.String(), nullable=True),
                sa.Column(
                    'businessOwnerDelegationEmails',
                    postgresql.ARRAY(sa.String()),
                    nullable=True,
                ),
                sa.Column('SamlAdminGroupName', sa.String(), nullable=True),
                sa.Column('importedS3Bucket', sa.Boolean(), nullable=True),
                sa.Column('importedGlueDatabase', sa.Boolean(), nullable=True),
                sa.Column('importedKmsKey', sa.Boolean(), nullable=True),
                sa.Column('importedAdminRole', sa.Boolean(), nullable=True),
                sa.Column('imported', sa.Boolean(), nullable=True),
                sa.PrimaryKeyConstraint('datasetUri'),
            )
        if not has_table('dataset_profiling_run', engine):
            op.create_table(
                'dataset_profiling_run',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('profilingRunUri', sa.String(), nullable=False),
                sa.Column('datasetUri', sa.String(), nullable=False),
                sa.Column('GlueJobName', sa.String(), nullable=True),
                sa.Column('GlueJobRunId', sa.String(), nullable=True),
                sa.Column('GlueTriggerSchedule', sa.String(), nullable=True),
                sa.Column('GlueTriggerName', sa.String(), nullable=True),
                sa.Column('GlueTableName', sa.String(), nullable=True),
                sa.Column('AwsAccountId', sa.String(), nullable=True),
                sa.Column(
                    'results', postgresql.JSON(astext_type=sa.Text()), nullable=True
                ),
                sa.Column('status', sa.String(), nullable=True),
                sa.PrimaryKeyConstraint('profilingRunUri'),
            )
        if not has_table('dataset_quality_rule', engine):
            op.create_table(
                'dataset_quality_rule',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('datasetUri', sa.String(), nullable=False),
                sa.Column('ruleUri', sa.String(), nullable=False),
                sa.Column('query', sa.String(), nullable=False),
                sa.Column('status', sa.String(), nullable=False),
                sa.Column(
                    'logs', postgresql.JSON(astext_type=sa.Text()), nullable=True
                ),
                sa.PrimaryKeyConstraint('ruleUri'),
            )
        if not has_table('dataset_storage_location', engine):
            op.create_table(
                'dataset_storage_location',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('datasetUri', sa.String(), nullable=False),
                sa.Column('locationUri', sa.String(), nullable=False),
                sa.Column('AWSAccountId', sa.String(), nullable=False),
                sa.Column('S3BucketName', sa.String(), nullable=False),
                sa.Column('S3Prefix', sa.String(), nullable=False),
                sa.Column('S3AccessPoint', sa.String(), nullable=True),
                sa.Column('region', sa.String(), nullable=True),
                sa.Column('locationCreated', sa.Boolean(), nullable=True),
                sa.PrimaryKeyConstraint('locationUri'),
            )
        if not has_table('dataset_table', engine):
            op.create_table(
                'dataset_table',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('datasetUri', sa.String(), nullable=False),
                sa.Column('tableUri', sa.String(), nullable=False),
                sa.Column('AWSAccountId', sa.String(), nullable=False),
                sa.Column('S3BucketName', sa.String(), nullable=False),
                sa.Column('S3Prefix', sa.String(), nullable=False),
                sa.Column('GlueDatabaseName', sa.String(), nullable=False),
                sa.Column('GlueTableName', sa.String(), nullable=False),
                sa.Column('GlueTableConfig', sa.Text(), nullable=True),
                sa.Column(
                    'GlueTableProperties',
                    postgresql.JSON(astext_type=sa.Text()),
                    nullable=True,
                ),
                sa.Column('LastGlueTableStatus', sa.String(), nullable=True),
                sa.Column('region', sa.String(), nullable=True),
                sa.Column('stage', sa.String(), nullable=True),
                sa.Column('topics', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('confidentiality', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('tableUri'),
            )
        if not has_table('dataset_table_column', engine):
            op.create_table(
                'dataset_table_column',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('datasetUri', sa.String(), nullable=False),
                sa.Column('tableUri', sa.String(), nullable=False),
                sa.Column('columnUri', sa.String(), nullable=False),
                sa.Column('AWSAccountId', sa.String(), nullable=False),
                sa.Column('GlueDatabaseName', sa.String(), nullable=False),
                sa.Column('GlueTableName', sa.String(), nullable=False),
                sa.Column('region', sa.String(), nullable=True),
                sa.Column('typeName', sa.String(), nullable=False),
                sa.Column('columnType', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('columnUri'),
            )
        if not has_table('dataset_table_profiling_job', engine):
            op.create_table(
                'dataset_table_profiling_job',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('tableUri', sa.String(), nullable=False),
                sa.Column('jobUri', sa.String(), nullable=False),
                sa.Column('AWSAccountId', sa.String(), nullable=False),
                sa.Column('RunCommandId', sa.String(), nullable=True),
                sa.Column('GlueDatabaseName', sa.String(), nullable=False),
                sa.Column('GlueTableName', sa.String(), nullable=False),
                sa.Column('region', sa.String(), nullable=True),
                sa.Column('status', sa.String(), nullable=True),
                sa.PrimaryKeyConstraint('jobUri'),
            )
        if not has_table('environment', engine):
            op.create_table(
                'environment',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('organizationUri', sa.String(), nullable=False),
                sa.Column('environmentUri', sa.String(), nullable=False),
                sa.Column('AwsAccountId', sa.String(), nullable=False),
                sa.Column('region', sa.String(), nullable=False),
                sa.Column('cognitoGroupName', sa.String(), nullable=True),
                sa.Column('resourcePrefix', sa.String(), nullable=False),
                sa.Column('validated', sa.Boolean(), nullable=True),
                sa.Column('environmentType', sa.String(), nullable=False),
                sa.Column(
                    'isOrganizationDefaultEnvironment', sa.Boolean(), nullable=True
                ),
                sa.Column('EnvironmentDefaultIAMRoleName', sa.String(), nullable=False),
                sa.Column('EnvironmentDefaultIAMRoleImported', sa.String(), nullable=True),
                sa.Column('EnvironmentDefaultIAMRoleArn', sa.String(), nullable=False),
                sa.Column('EnvironmentDefaultBucketName', sa.String(), nullable=True),
                sa.Column('EnvironmentDefaultAthenaWorkGroup', sa.String(), nullable=True),
                sa.Column('roleCreated', sa.Boolean(), nullable=False),
                sa.Column('dashboardsEnabled', sa.Boolean(), nullable=True),
                sa.Column('notebooksEnabled', sa.Boolean(), nullable=True),
                sa.Column('mlStudiosEnabled', sa.Boolean(), nullable=True),
                sa.Column('pipelinesEnabled', sa.Boolean(), nullable=True),
                sa.Column('warehousesEnabled', sa.Boolean(), nullable=True),
                sa.Column('SamlGroupName', sa.String(), nullable=True),
                sa.Column('CDKRoleArn', sa.String(), nullable=False),
                sa.Column('subscriptionsEnabled', sa.Boolean(), nullable=True),
                sa.Column(
                    'subscriptionsProducersTopicName', sa.String(), nullable=True
                ),
                sa.Column(
                    'subscriptionsProducersTopicImported', sa.Boolean(), nullable=True
                ),
                sa.Column(
                    'subscriptionsConsumersTopicName', sa.String(), nullable=True
                ),
                sa.Column(
                    'subscriptionsConsumersTopicImported', sa.Boolean(), nullable=True
                ),
                sa.PrimaryKeyConstraint('environmentUri'),
            )
        if not has_table('environment_group_permission', engine):
            op.create_table(
                'environment_group_permission',
                sa.Column('groupUri', sa.String(), nullable=False),
                sa.Column('environmentUri', sa.String(), nullable=False),
                sa.Column('invitedBy', sa.String(), nullable=True),
                sa.Column('environmentIAMRoleArn', sa.String(), nullable=True),
                sa.Column('environmentIAMRoleName', sa.String(), nullable=True),
                sa.Column('environmentIAMRoleImported', sa.Boolean(), nullable=True),
                sa.Column('environmentAthenaWorkGroup', sa.String(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('groupRoleInEnvironment', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('groupUri', 'environmentUri'),
            )
        if not has_table('feed_message', engine):
            op.create_table(
                'feed_message',
                sa.Column('feedMessageUri', sa.String(), nullable=False),
                sa.Column('creator', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=False),
                sa.Column('content', sa.String(), nullable=True),
                sa.Column('targetUri', sa.String(), nullable=False),
                sa.Column('targetType', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('feedMessageUri'),
            )
        if not has_table('glossary_node', engine):
            op.create_table(
                'glossary_node',
                sa.Column('nodeUri', sa.String(), nullable=False),
                sa.Column('parentUri', sa.String(), nullable=True),
                sa.Column('nodeType', sa.String(), nullable=True),
                sa.Column('status', sa.String(), nullable=True),
                sa.Column('path', sa.String(), nullable=False),
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('readme', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('admin', sa.String(), nullable=True),
                sa.PrimaryKeyConstraint('nodeUri'),
            )
        if not has_table('glossary_schema', engine):
            op.create_table(
                'glossary_schema',
                sa.Column('schemaUri', sa.String(), nullable=False),
                sa.Column('json_schema', postgresql.JSON(astext_type=sa.Text()), nullable=False),
                sa.PrimaryKeyConstraint('schemaUri'),
            )
        if not has_table('glossary_schema_map', engine):
            op.create_table(
                'glossary_schema_map',
                sa.Column('schemaUri', sa.String(), nullable=False),
                sa.Column('nodeUri', sa.String(), nullable=False),
                sa.Column('schema', postgresql.JSON(astext_type=sa.Text()), nullable=False),
                sa.PrimaryKeyConstraint('schemaUri', 'nodeUri'),
            )
        if not has_table('term_link', engine):
            op.create_table(
                'term_link',
                sa.Column('linkUri', sa.String(), nullable=False),
                sa.Column('nodeUri', sa.String(), nullable=False),
                sa.Column('targetUri', sa.String(), nullable=False),
                sa.Column('targetType', sa.String(), nullable=False),
                sa.Column('approvedBySteward', sa.Boolean(), nullable=True),
                sa.Column('approvedByOwner', sa.Boolean(), nullable=True),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.PrimaryKeyConstraint('linkUri'),
            )
        if not has_table('group', engine):
            op.create_table(
                'group',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('groupUri', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('groupUri'),
            )
        if not has_table('group_member', engine):
            op.create_table(
                'group_member',
                sa.Column('groupUri', sa.String(), nullable=False),
                sa.Column('userName', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('userRoleInGroup', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('groupUri', 'userName'),
            )
        if not has_table('keyvaluetag', engine):
            op.create_table(
                'keyvaluetag',
                sa.Column('tagUri', sa.String(), nullable=False),
                sa.Column('targetUri', sa.String(), nullable=False),
                sa.Column('targetType', sa.String(), nullable=False),
                sa.Column('key', sa.String(), nullable=False),
                sa.Column('value', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('tagUri'),
            )
        if not has_table('notification', engine):
            op.create_table(
                'notification',
                sa.Column('notificationUri', sa.String(), nullable=False),
                sa.Column(
                    'type',
                    sa.Enum(
                        'SHARE_OBJECT_SUBMITTED',
                        'SHARE_ITEM_REQUEST',
                        'SHARE_OBJECT_APPROVED',
                        'SHARE_OBJECT_REJECTED',
                        'SHARE_OBJECT_PENDING_APPROVAL',
                        'DATASET_VERSION',
                        name='notificationtype',
                    ),
                    nullable=True,
                ),
                sa.Column('message', sa.String(), nullable=False),
                sa.Column('username', sa.String(), nullable=False),
                sa.Column('is_read', sa.Boolean(), nullable=False),
                sa.Column('target_uri', sa.String(), nullable=True),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.PrimaryKeyConstraint('notificationUri'),
            )
        if not has_table('organization', engine):
            op.create_table(
                'organization',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('organizationUri', sa.String(), nullable=False),
                sa.Column('SamlGroupName', sa.String(), nullable=True),
                sa.PrimaryKeyConstraint('organizationUri'),
            )
        if not has_table('organization_group', engine):
            op.create_table(
                'organization_group',
                sa.Column('groupUri', sa.String(), nullable=False),
                sa.Column('organizationUri', sa.String(), nullable=False),
                sa.Column('invitedBy', sa.String(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.PrimaryKeyConstraint('groupUri', 'organizationUri'),
            )
        if not has_table('permissions', engine):
            op.create_table(
                'permission',
                sa.Column('permissionUri', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column(
                    'type', sa.Enum('TENANT', 'RESOURCE', name='permissiontype'), nullable=False
                ),
                sa.Column('description', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.PrimaryKeyConstraint('permissionUri'),
            )
            op.create_index(op.f('ix_permission_name'), 'permission', ['name'], unique=False)
        if not has_table('redshiftcluster', engine):
            op.create_table(
                'redshiftcluster',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('environmentUri', sa.String(), nullable=False),
                sa.Column('organizationUri', sa.String(), nullable=False),
                sa.Column('clusterUri', sa.String(), nullable=False),
                sa.Column('clusterArn', sa.String(), nullable=True),
                sa.Column('clusterName', sa.String(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('databaseName', sa.String(), nullable=True),
                sa.Column('databaseUser', sa.String(), nullable=True),
                sa.Column('masterUsername', sa.String(), nullable=True),
                sa.Column('masterDatabaseName', sa.String(), nullable=True),
                sa.Column('nodeType', sa.String(), nullable=True),
                sa.Column('numberOfNodes', sa.Integer(), nullable=True),
                sa.Column('region', sa.String(), nullable=True),
                sa.Column('AwsAccountId', sa.String(), nullable=True),
                sa.Column('kmsAlias', sa.String(), nullable=True),
                sa.Column('status', sa.String(), nullable=True),
                sa.Column('vpc', sa.String(), nullable=True),
                sa.Column('subnetGroupName', sa.String(), nullable=True),
                sa.Column('subnetIds', sa.ARRAY(sa.String()), nullable=True),
                sa.Column('securityGroupIds', sa.ARRAY(sa.String()), nullable=True),
                sa.Column('CFNStackName', sa.String(), nullable=True),
                sa.Column('CFNStackStatus', sa.String(), nullable=True),
                sa.Column('CFNStackArn', sa.String(), nullable=True),
                sa.Column('IAMRoles', sa.ARRAY(sa.String()), nullable=True),
                sa.Column('endpoint', sa.String(), nullable=True),
                sa.Column('port', sa.Integer(), nullable=True),
                sa.Column('datahubSecret', sa.String(), nullable=True),
                sa.Column('masterSecret', sa.String(), nullable=True),
                sa.Column('external_schema_created', sa.Boolean(), nullable=True),
                sa.Column('SamlGroupName', sa.String(), nullable=True),
                sa.Column('imported', sa.Boolean(), nullable=True),
                sa.PrimaryKeyConstraint('clusterUri'),
            )
        if not has_table('redshiftcluster_dataset', engine):
            op.create_table(
                'redshiftcluster_dataset',
                sa.Column('clusterUri', sa.String(), nullable=False),
                sa.Column('datasetUri', sa.String(), nullable=False),
                sa.Column('datasetCopyEnabled', sa.Boolean(), nullable=True),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.PrimaryKeyConstraint('clusterUri', 'datasetUri'),
            )
        if not has_table('redshiftcluster_datasettable', engine):
            op.create_table(
                'redshiftcluster_datasettable',
                sa.Column('clusterUri', sa.String(), nullable=False),
                sa.Column('datasetUri', sa.String(), nullable=False),
                sa.Column('tableUri', sa.String(), nullable=False),
                sa.Column('shareUri', sa.String(), nullable=True),
                sa.Column('enabled', sa.Boolean(), nullable=True),
                sa.Column('schema', sa.String(), nullable=False),
                sa.Column('databaseName', sa.String(), nullable=False),
                sa.Column('dataLocation', sa.String(), nullable=True),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.PrimaryKeyConstraint('clusterUri', 'datasetUri', 'tableUri'),
            )
        if not has_table('resource_policy', engine):
            op.create_table(
                'resource_policy',
                sa.Column('sid', sa.String(), nullable=False),
                sa.Column('resourceUri', sa.String(), nullable=False),
                sa.Column('resourceType', sa.String(), nullable=False),
                sa.Column('principalId', sa.String(), nullable=False),
                sa.Column(
                    'principalType',
                    sa.Enum('USER', 'GROUP', 'SERVICE', name='rp_principal_type'),
                    nullable=True,
                ),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.PrimaryKeyConstraint('sid'),
            )
            op.create_index(
                op.f('ix_resource_policy_principalId'),
                'resource_policy',
                ['principalId'],
                unique=False,
            )
            op.create_index(
                op.f('ix_resource_policy_resourceType'),
                'resource_policy',
                ['resourceType'],
                unique=False,
            )
            op.create_index(
                op.f('ix_resource_policy_resourceUri'),
                'resource_policy',
                ['resourceUri'],
                unique=False,
            )
        if not has_table('resource_policy_permission', engine):
            op.create_table(
                'resource_policy_permission',
                sa.Column('sid', sa.String(), nullable=False),
                sa.Column('permissionUri', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.ForeignKeyConstraint(
                    ['permissionUri'],
                    ['permission.permissionUri'],
                ),
                sa.ForeignKeyConstraint(
                    ['sid'],
                    ['resource_policy.sid'],
                ),
                sa.PrimaryKeyConstraint('sid', 'permissionUri'),
            )
        if not has_table('sagemaker_notebook', engine):
            op.create_table(
                'sagemaker_notebook',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('environmentUri', sa.String(), nullable=False),
                sa.Column('notebookUri', sa.String(), nullable=False),
                sa.Column('NotebookInstanceName', sa.String(), nullable=False),
                sa.Column('NotebookInstanceStatus', sa.String(), nullable=False),
                sa.Column('AWSAccountId', sa.String(), nullable=False),
                sa.Column('RoleArn', sa.String(), nullable=False),
                sa.Column('region', sa.String(), nullable=True),
                sa.Column('SamlAdminGroupName', sa.String(), nullable=True),
                sa.Column('VpcId', sa.String(), nullable=True),
                sa.Column('SubnetId', sa.String(), nullable=True),
                sa.Column('VolumeSizeInGB', sa.Integer(), nullable=True),
                sa.Column('InstanceType', sa.String(), nullable=True),
                sa.PrimaryKeyConstraint('notebookUri'),
            )
        if not has_table('sagemaker_studio_domain', engine):
            op.create_table(
                'sagemaker_studio_domain',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('environmentUri', sa.String(), nullable=False),
                sa.Column('sagemakerStudioUri', sa.String(), nullable=False),
                sa.Column('sagemakerStudioDomainID', sa.String(), nullable=False),
                sa.Column('SagemakerStudioStatus', sa.String(), nullable=False),
                sa.Column('AWSAccountId', sa.String(), nullable=False),
                sa.Column('RoleArn', sa.String(), nullable=False),
                sa.Column('region', sa.String(), nullable=True),
                sa.PrimaryKeyConstraint('sagemakerStudioUri'),
            )
        if not has_table('sagemaker_studio_user_profile', engine):
            op.create_table(
                'sagemaker_studio_user_profile',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('environmentUri', sa.String(), nullable=False),
                sa.Column('sagemakerStudioUserProfileUri', sa.String(), nullable=False),
                sa.Column(
                    'sagemakerStudioUserProfileStatus', sa.String(), nullable=False
                ),
                sa.Column(
                    'sagemakerStudioUserProfileName', sa.String(), nullable=False
                ),
                sa.Column(
                    'sagemakerStudioUserProfileNameSlugify', sa.String(), nullable=False
                ),
                sa.Column('sagemakerStudioDomainID', sa.String(), nullable=False),
                sa.Column('AWSAccountId', sa.String(), nullable=False),
                sa.Column('RoleArn', sa.String(), nullable=False),
                sa.Column('region', sa.String(), nullable=True),
                sa.Column('SamlAdminGroupName', sa.String(), nullable=True),
                sa.PrimaryKeyConstraint('sagemakerStudioUserProfileUri'),
            )
        if not has_table('share_object', engine):
            op.create_table(
                'share_object',
                sa.Column('shareUri', sa.String(), nullable=False),
                sa.Column('datasetUri', sa.String(), nullable=False),
                sa.Column('principalId', sa.String(), nullable=True),
                sa.Column('principalType', sa.String(), nullable=True),
                sa.Column('status', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('confirmed', sa.Boolean(), nullable=True),
                sa.PrimaryKeyConstraint('shareUri'),
            )
        if not has_table('share_object_item', engine):
            op.create_table(
                'share_object_item',
                sa.Column('shareUri', sa.String(), nullable=False),
                sa.Column('shareItemUri', sa.String(), nullable=False),
                sa.Column('itemType', sa.String(), nullable=False),
                sa.Column('itemUri', sa.String(), nullable=False),
                sa.Column('itemName', sa.String(), nullable=False),
                sa.Column('permission', sa.String(), nullable=True),
                sa.Column('created', sa.DateTime(), nullable=False),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('GlueDatabaseName', sa.String(), nullable=True),
                sa.Column('GlueTableName', sa.String(), nullable=True),
                sa.Column('S3AccessPointName', sa.String(), nullable=True),
                sa.Column('status', sa.String(), nullable=False),
                sa.Column('action', sa.String(), nullable=True),
                sa.PrimaryKeyConstraint('shareItemUri'),
            )
        if not has_table('sqlpipeline', engine):
            op.create_table(
                'sqlpipeline',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('environmentUri', sa.String(), nullable=False),
                sa.Column('sqlPipelineUri', sa.String(), nullable=False),
                sa.Column('region', sa.String(), nullable=True),
                sa.Column('AwsAccountId', sa.String(), nullable=False),
                sa.Column('SamlGroupName', sa.String(), nullable=False),
                sa.Column('repo', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('sqlPipelineUri'),
            )
        if not has_table('stack', engine):
            op.create_table(
                'stack',
                sa.Column('stackUri', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=True),
                sa.Column('targetUri', sa.String(), nullable=False),
                sa.Column('accountid', sa.String(), nullable=False),
                sa.Column('region', sa.String(), nullable=False),
                sa.Column('cronexpr', sa.String(), nullable=True),
                sa.Column('status', sa.String(), nullable=False),
                sa.Column('stack', sa.String(), nullable=False),
                sa.Column(
                    'payload', postgresql.JSON(astext_type=sa.Text()), nullable=True
                ),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('stackid', sa.String(), nullable=True),
                sa.Column(
                    'outputs', postgresql.JSON(astext_type=sa.Text()), nullable=True
                ),
                sa.Column(
                    'resources', postgresql.JSON(astext_type=sa.Text()), nullable=True
                ),
                sa.Column(
                    'error', postgresql.JSON(astext_type=sa.Text()), nullable=True
                ),
                sa.Column('events', postgresql.JSON(astext_type=sa.Text()), nullable=True),
                sa.Column('lastSeen', sa.DateTime(), nullable=True),
                sa.Column('EcsTaskArn', sa.String(), nullable=True),
                sa.PrimaryKeyConstraint('stackUri'),
            )
        if not has_table('tag', engine):
            op.create_table(
                'tag',
                sa.Column('id', sa.String(), nullable=False),
                sa.Column('tag', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=True),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.PrimaryKeyConstraint('id'),
            )
        if not has_table('item_tags', engine):
            op.create_table(
                'item_tags',
                sa.Column('tagid', sa.String(), nullable=False),
                sa.Column('itemid', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('tagid', 'itemid'),
            )
        if not has_table('task', engine):
            op.create_table(
                'task',
                sa.Column('taskUri', sa.String(), nullable=False),
                sa.Column('targetUri', sa.String(), nullable=False),
                sa.Column('cronexpr', sa.String(), nullable=True),
                sa.Column('status', sa.String(), nullable=False),
                sa.Column('action', sa.String(), nullable=False),
                sa.Column('payload', postgresql.JSON(astext_type=sa.Text()), nullable=True),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('response', postgresql.JSON(astext_type=sa.Text()), nullable=True),
                sa.Column('error', postgresql.JSON(astext_type=sa.Text()), nullable=True),
                sa.Column('lastSeen', sa.DateTime(), nullable=True),
                sa.PrimaryKeyConstraint('taskUri'),
            )
        if not has_table('tenant', engine):
            op.create_table(
                'tenant',
                sa.Column('tenantUri', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.PrimaryKeyConstraint('tenantUri'),
            )
            op.create_index(op.f('ix_tenant_name'), 'tenant', ['name'], unique=True)
        if not has_table('tenant_administrator', engine):
            op.create_table(
                'tenant_administrator',
                sa.Column('userName', sa.String(), nullable=False),
                sa.Column('tenantUri', sa.String(), nullable=False),
                sa.Column('userRoleInTenant', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('userName'),
                sa.ForeignKeyConstraint(
                    ['tenantUri'],
                ),
            )
        if not has_table('tenant_policy', engine):
            op.create_table(
                'tenant_policy',
                sa.Column('sid', sa.String(), nullable=False),
                sa.Column('tenantUri', sa.String(), nullable=False),
                sa.Column('principalId', sa.String(), nullable=False),
                sa.Column(
                    'principalType',
                    sa.Enum('USER', 'GROUP', 'SERVICE', name='tenant_principal_type'),
                    nullable=True,
                ),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.ForeignKeyConstraint(
                    ['tenantUri'],
                    ['tenant.tenantUri'],
                ),
                sa.PrimaryKeyConstraint('sid'),
            )
            op.create_index(
                op.f('ix_tenant_policy_principalId'),
                'tenant_policy',
                ['principalId'],
                unique=False,
            )
        if not has_table('tenant_policy_permission', engine):
            op.create_table(
                'tenant_policy_permission',
                sa.Column('sid', sa.String(), nullable=False),
                sa.Column('permissionUri', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.ForeignKeyConstraint(
                    ['permissionUri'],
                    ['permission.permissionUri'],
                ),
                sa.ForeignKeyConstraint(
                    ['sid'],
                    ['tenant_policy.sid'],
                ),
                sa.PrimaryKeyConstraint('sid', 'permissionUri'),
            )
        if not has_table('user', engine):
            op.create_table(
                'user',
                sa.Column('userId', sa.String(), nullable=False),
                sa.Column('userName', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('userId'),
            )
        if not has_table('vote', engine):
            op.create_table(
                'vote',
                sa.Column('voteUri', sa.String(), nullable=False),
                sa.Column('username', sa.String(), nullable=False),
                sa.Column('targetUri', sa.String(), nullable=False),
                sa.Column('targetType', sa.String(), nullable=False),
                sa.Column('upvote', sa.Boolean(), nullable=True),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.PrimaryKeyConstraint('voteUri'),
            )
        if not has_table('vpc', engine):
            op.create_table(
                'vpc',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('environmentUri', sa.String(), nullable=False),
                sa.Column('vpcUri', sa.String(), nullable=False),
                sa.Column('region', sa.String(), nullable=True),
                sa.Column('AwsAccountId', sa.String(), nullable=False),
                sa.Column('SamlGroupName', sa.String(), nullable=True),
                sa.Column('VpcId', sa.String(), nullable=False),
                sa.Column('privateSubnetIds', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('publicSubnetIds', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('default', sa.Boolean(), nullable=True),
                sa.PrimaryKeyConstraint('vpcUri'),
            )
        if not has_table('worksheet', engine):
            op.create_table(
                'worksheet',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('worksheetUri', sa.String(), nullable=False),
                sa.Column('SamlAdminGroupName', sa.String(), nullable=False),
                sa.Column('sqlBody', sa.String(), nullable=True),
                sa.Column(
                    'chartConfig', postgresql.JSON(astext_type=sa.Text()), nullable=True
                ),
                sa.Column('lastSavedAthenaQueryIdForQuery', sa.String(), nullable=True),
                sa.Column('lastSavedAthenaQueryIdForChart', sa.String(), nullable=True),
                sa.PrimaryKeyConstraint('worksheetUri'),
            )
        if not has_table('worksheet_query_result', engine):
            op.create_table(
                'worksheet_query_result',
                sa.Column('worksheetUri', sa.String(), nullable=False),
                sa.Column('AthenaQueryId', sa.String(), nullable=False),
                sa.Column('status', sa.String(), nullable=False),
                sa.Column(
                    'queryType',
                    sa.Enum('chart', 'data', name='querytype'),
                    nullable=False,
                ),
                sa.Column('sqlBody', sa.String(), nullable=False),
                sa.Column('AwsAccountId', sa.String(), nullable=False),
                sa.Column('region', sa.String(), nullable=False),
                sa.Column('OutputLocation', sa.String(), nullable=False),
                sa.Column('error', sa.String(), nullable=True),
                sa.Column('ElapsedTimeInMs', sa.Integer(), nullable=True),
                sa.Column('DataScannedInBytes', sa.Integer(), nullable=True),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.PrimaryKeyConstraint('AthenaQueryId'),
            )
        if not has_table('worksheet_share', engine):
            op.create_table(
                'worksheet_share',
                sa.Column('worksheetShareUri', sa.String(), nullable=False),
                sa.Column('worksheetUri', sa.String(), nullable=False),
                sa.Column('principalId', sa.String(), nullable=False),
                sa.Column('principalType', sa.String(), nullable=False),
                sa.Column('canEdit', sa.Boolean(), nullable=True),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.PrimaryKeyConstraint('worksheetShareUri'),
            )
        """

        # ### Clean-up old tables ###
        old_tables = ['all_permissions', 'apikey', 'athena_query_execution', 'data_access_request', 'dataset_access_point', 'dataset_loader', 'dataset_query', 'dataset_storage_location_permission', 'dataset_table_permission', 'dataset_topic', 'dataset_user_permission', 'document', 'EnvironmentRedshiftCluster', 'environment_permission', 'environment_user_permission', 'key_value_pair', 'lineage_store', 'metadata_facet', 'metadata_tag', 'metric', 'organization_topic', 'organization_user', 'redshift_cluster_user_permission', 'saved_query', 'scheduled_query', 'search_index', 'share_object_history', 'share_object_item_v2', 'share_object_v2', 'userprofile']
        for table in old_tables:
            if has_table(table, engine):
                print(f"Dropping table: {table}")
                op.drop_table(table)

    except Exception as e:
        print('Failed to init database due to:', e)
        pass
# ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # ### These are the tables that should be defined
    """
    op.drop_table('worksheet_share')
    op.drop_table('worksheet_query_result')
    op.drop_table('worksheet')
    op.drop_table('vpc')
    op.drop_table('user')
    op.drop_table('tenant_policy_permission')
    op.drop_table('tenant_policy')
    op.drop_table('tenant_administrator')
    op.drop_table('tenant')
    op.drop_table('task')
    op.drop_table('item_tags')
    op.drop_table('tag')
    op.drop_table('stack')
    op.drop_table('sqlpipeline')
    op.drop_table('share_object_item')
    op.drop_table('share_object')
    op.drop_table('sagemaker_studio_user_profile')
    op.drop_table('sagemaker_studio_domain')
    op.drop_table('sagemaker_notebook')
    op.drop_table('resource_policy_permission')
    op.drop_table('resource_policy')
    op.drop_table('redshiftcluster_datasettable')
    op.drop_table('redshiftcluster_dataset')
    op.drop_table('redshiftcluster')
    op.drop_table('permissions')
    op.drop_table('organization_group')
    op.drop_table('organization')
    op.drop_table('notification')
    op.drop_table('keyvaluetag')
    op.drop_table('group_member')
    op.drop_table('group')
    op.drop_table('term_link')
    op.drop_table('glossary_schema_map')
    op.drop_table('glossary_schema')
    op.drop_table('glossary_node')
    op.drop_table('feed_message')
    op.drop_table('environment_group_permission')
    op.drop_table('environment')
    op.drop_table('dataset_table_profiling_job')
    op.drop_table('dataset_table_column')
    op.drop_table('dataset_table')
    op.drop_table('dataset_storage_location')
    op.drop_table('dataset_quality_rule')
    op.drop_table('dataset_profiling_run')
    op.drop_table('dataset')
    op.drop_table('dashboardshare')
    op.drop_table('dashboard')
    op.drop_table('activity')
    """
    # ### end Alembic commands ###
